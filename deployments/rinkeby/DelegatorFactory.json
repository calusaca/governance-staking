{
  "address": "0x0aafdB19021a3a87A510dD4db7dce62318b49Cd1",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "stakingToken_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "rewardsToken_",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "waitTime_",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "timelock_",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "delegator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "delegatee",
          "type": "address"
        }
      ],
      "name": "DelegatorCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "reward",
          "type": "uint256"
        }
      ],
      "name": "RewardAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "reward",
          "type": "uint256"
        }
      ],
      "name": "RewardPaid",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newDuration",
          "type": "uint256"
        }
      ],
      "name": "RewardsDurationUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "delegator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "delegatee",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Staked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "waitTime",
          "type": "uint256"
        }
      ],
      "name": "WaitTimeUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "delegator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "delegatee",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Withdrawn",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account_",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "delegatee_",
          "type": "address"
        }
      ],
      "name": "createDelegator",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "delegateeToDelegator",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "delegatorToDelegatee",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "delegators",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account_",
          "type": "address"
        }
      ],
      "name": "earned",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getReward",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRewardForDuration",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lastTimeRewardApplicable",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lastUpdateTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "a_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "b_",
          "type": "uint256"
        }
      ],
      "name": "min",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "reward_",
          "type": "uint256"
        }
      ],
      "name": "notifyRewardAmount",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "periodFinish",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardPerToken",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardPerTokenStored",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "rewards",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardsDuration",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardsToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "rewardsDuration_",
          "type": "uint256"
        }
      ],
      "name": "setRewardsDuration",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "delegator_",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount_",
          "type": "uint256"
        }
      ],
      "name": "stake",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "stakerWaitTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stakingToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "waitTime_",
          "type": "uint256"
        }
      ],
      "name": "updateWaitTime",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "userRewardPerTokenPaid",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "waitTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "delegator_",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount_",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xe2af8fa72dc1d3a0e725a23825788e627cdded4dc90bbb3872cfdd9eb3d5a441",
  "receipt": {
    "to": null,
    "from": "0x71cEA4383F7FadDD1F17c960DE7b6A32bFDAf139",
    "contractAddress": "0x0aafdB19021a3a87A510dD4db7dce62318b49Cd1",
    "transactionIndex": 20,
    "gasUsed": "2261964",
    "logsBloom": "0x
    "blockHash": "0xdc8a7c577d318694c197d5cff1c5d2661f47cf6b59bc6b718d87d53b77654cab",
    "transactionHash": "0xe2af8fa72dc1d3a0e725a23825788e627cdded4dc90bbb3872cfdd9eb3d5a441",
    "logs": [
      {
        "transactionIndex": 20,
        "blockNumber": 9252049,
        "transactionHash": "0xe2af8fa72dc1d3a0e725a23825788e627cdded4dc90bbb3872cfdd9eb3d5a441",
        "address": "0x0aafdB19021a3a87A510dD4db7dce62318b49Cd1",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000071cea4383f7faddd1f17c960de7b6a32bfdaf139"
        ],
        "data": "0x",
        "logIndex": 30,
        "blockHash": "0xdc8a7c577d318694c197d5cff1c5d2661f47cf6b59bc6b718d87d53b77654cab"
      },
      {
        "transactionIndex": 20,
        "blockNumber": 9252049,
        "transactionHash": "0xe2af8fa72dc1d3a0e725a23825788e627cdded4dc90bbb3872cfdd9eb3d5a441",
        "address": "0x0aafdB19021a3a87A510dD4db7dce62318b49Cd1",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x00000000000000000000000071cea4383f7faddd1f17c960de7b6a32bfdaf139",
          "0x000000000000000000000000f77e8426ecef4a44d5ec8986fb525127bad32fd1"
        ],
        "data": "0x",
        "logIndex": 31,
        "blockHash": "0xdc8a7c577d318694c197d5cff1c5d2661f47cf6b59bc6b718d87d53b77654cab"
      }
    ],
    "blockNumber": 9252049,
    "cumulativeGasUsed": "8845997",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xAa715DbD2ED909B7B7727dC864F3B78276D14A19",
    "0xAa715DbD2ED909B7B7727dC864F3B78276D14A19",
    604800,
    "0xf77E8426EceF4A44D5Ec8986FB525127BaD32Fd1"
  ],
  "solcInputHash": "55c1b755f65770d5dcd2cddc7c0af46a",
  "metadata": "{\"compiler\":{\"version\":\"0.8.6+commit.11564f7e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"stakingToken_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"rewardsToken_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"waitTime_\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"timelock_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"delegator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"delegatee\",\"type\":\"address\"}],\"name\":\"DelegatorCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"name\":\"RewardAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"name\":\"RewardPaid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newDuration\",\"type\":\"uint256\"}],\"name\":\"RewardsDurationUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"delegator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"delegatee\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Staked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"waitTime\",\"type\":\"uint256\"}],\"name\":\"WaitTimeUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"delegator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"delegatee\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdrawn\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account_\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"delegatee_\",\"type\":\"address\"}],\"name\":\"createDelegator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"delegateeToDelegator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"delegatorToDelegatee\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"delegators\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account_\",\"type\":\"address\"}],\"name\":\"earned\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRewardForDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastTimeRewardApplicable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastUpdateTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"a_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"b_\",\"type\":\"uint256\"}],\"name\":\"min\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"reward_\",\"type\":\"uint256\"}],\"name\":\"notifyRewardAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"periodFinish\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardPerToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardPerTokenStored\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"rewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardsDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardsToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"rewardsDuration_\",\"type\":\"uint256\"}],\"name\":\"setRewardsDuration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"delegator_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"stakerWaitTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakingToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"waitTime_\",\"type\":\"uint256\"}],\"name\":\"updateWaitTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userRewardPerTokenPaid\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"waitTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"delegator_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Cryptex.Finance\",\"kind\":\"dev\",\"methods\":{\"balanceOf(address)\":{\"params\":{\"account_\":\"address\"}},\"constructor\":{\"details\":\"transfers ownership to timelock\",\"params\":{\"rewardsToken_\":\"address\",\"stakingToken_\":\"address\",\"timelock_\":\"address\",\"waitTime_\":\"uint256\"}},\"createDelegator(address)\":{\"details\":\"only one delegator contract pointing to the same delegatee can exist\",\"params\":{\"delegatee_\":\"address that will be receiving all votes\"}},\"earned(address)\":{\"params\":{\"account_\":\"address\"}},\"getReward()\":{\"details\":\"updates rewards on callfrom the total reward a vestingRatio amount is locked into vesting and the rest is transferredif vesting period has passed transfer all rewards\"},\"min(uint256,uint256)\":{\"params\":{\"a_\":\"uint\",\"b_\":\"uint\"}},\"notifyRewardAmount(uint256)\":{\"details\":\"Only owner  can call itIncreases duration of rewards\",\"params\":{\"reward_\":\"uint\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"setRewardsDuration(uint256)\":{\"details\":\"Only owner can call itPrevious rewards must be complete\",\"params\":{\"rewardsDuration_\":\"uint\"}},\"stake(address,uint256)\":{\"details\":\"Delegator must be valid and amount has to be greater than 0amount_ is transferred to the delegator contract and staker starts earning rewards if activeupdates rewards on call\",\"params\":{\"amount_\":\"uint to be staked and delegated\",\"delegator_\":\"contract address where to send the amount_\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"updateWaitTime(uint256)\":{\"details\":\"only the owner can call it\",\"params\":{\"waitTime_\":\"uint new wait time\"}},\"withdraw(address,uint256)\":{\"details\":\"Delegator must be valid and amount has to be greater than 0amount_ must be <= that current user stakeamount_ is transferred from the  delegator contract to the stakerupdates rewards on callrequires that at least waitTime has passed since delegation to unDelegate\",\"params\":{\"amount_\":\"uint to be removed from stake and undelegated\",\"delegator_\":\"contract address where to remove the stake from\"}}},\"stateVariables\":{\"_balances\":{\"details\":\"Tracks the amount of staked tokens per user\"},\"_totalSupply\":{\"details\":\"Tracks the total supply of staked tokens\"}},\"title\":\"Delegator Contract Factory\",\"version\":1},\"userdoc\":{\"events\":{\"DelegatorCreated(address,address)\":{\"notice\":\"An event emitted when a Delegator is created\"},\"RewardAdded(uint256)\":{\"notice\":\"An event emitted when a reward is added\"},\"RewardPaid(address,uint256)\":{\"notice\":\"An event emitted when reward is paid to a user\"},\"RewardsDurationUpdated(uint256)\":{\"notice\":\"An event emitted when the rewards duration is updated\"},\"Staked(address,address,uint256)\":{\"notice\":\"An event emitted when an user has staked and delegated\"},\"WaitTimeUpdated(uint256)\":{\"notice\":\"An event emitted when the minimum wait time is updated\"},\"Withdrawn(address,address,uint256)\":{\"notice\":\"An event emitted when an user removes stake and undelegated\"}},\"kind\":\"user\",\"methods\":{\"balanceOf(address)\":{\"notice\":\"Returns the amount of staked tokens from specific user\"},\"constructor\":{\"notice\":\"Constructor\"},\"createDelegator(address)\":{\"notice\":\"Creates a new delegator contract that delegates all votes to delegatee_\"},\"delegateeToDelegator(address)\":{\"notice\":\"Tracks the delegator contract address from delegatee address\"},\"delegatorToDelegatee(address)\":{\"notice\":\"Tracks the address of a delegatee with a delegator contract address\"},\"delegators(address)\":{\"notice\":\"Tracks if address is an official delegator\"},\"earned(address)\":{\"notice\":\"Returns the amount of reward tokens a user has earned.\"},\"getReward()\":{\"notice\":\"Transfers to the caller the current amount of rewards tokens earned.\"},\"getRewardForDuration()\":{\"notice\":\"Returns reward rate for a duration\"},\"lastTimeRewardApplicable()\":{\"notice\":\"Returns the minimum between current block timestamp or the finish period of rewards.\"},\"lastUpdateTime()\":{\"notice\":\"Last time rewards were updated\"},\"min(uint256,uint256)\":{\"notice\":\"Returns the minimum between two variables\"},\"notifyRewardAmount(uint256)\":{\"notice\":\"Notifies the contract that reward has been added to be given.\"},\"periodFinish()\":{\"notice\":\"Tracks the period where users stop earning rewards\"},\"rewardPerToken()\":{\"notice\":\"Returns the calculated reward per token deposited.\"},\"rewardPerTokenStored()\":{\"notice\":\"Amount of reward calculated per token stored\"},\"rewards(address)\":{\"notice\":\"Tracks the user rewards\"},\"rewardsDuration()\":{\"notice\":\"How long the rewards lasts, it updates when more rewards are added\"},\"rewardsToken()\":{\"notice\":\"Address of the reward token\"},\"setRewardsDuration(uint256)\":{\"notice\":\"Updates the reward duration\"},\"stake(address,uint256)\":{\"notice\":\"Stakes to delegator_ the amount_ specified\"},\"stakerWaitTime(address,address)\":{\"notice\":\"Tracks minimum wait time the account has to wait before removing stake\"},\"stakingToken()\":{\"notice\":\"Address of the staking governance token\"},\"totalSupply()\":{\"notice\":\"Returns the total amount of staked tokens.\"},\"updateWaitTime(uint256)\":{\"notice\":\"updates the min wait time between delegation and unDelegation\"},\"userRewardPerTokenPaid(address)\":{\"notice\":\"Track the rewards paid to users\"},\"waitTime()\":{\"notice\":\"Minimum wait time before removing stake\"},\"withdraw(address,uint256)\":{\"notice\":\"Removes amount_ from delegator_\"}},\"notice\":\"Contract in charge of generating Delegator contracts, handling delegations and CTX balance map, rewards.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/DelegatorFactory.sol\":\"DelegatorFactory\"},\"evmVersion\":\"berlin\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":999999},\"remappings\":[]},\"sources\":{\"lib/openzeppelin-contracts/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x6bb804a310218875e89d12c053e94a13a4607cdf7cc2052f3e52bd32a0dc50a1\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x842ccf9a6cd33e17b7acef8372ca42090755217b358fe0c44c98e951ea549d3a\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x90565a39ae45c80f0468dc96c7b20d0afc3055f344c8203a0c9258239f350b9f\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is no longer needed starting with Solidity 0.8. The compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8666f020bd8fc9dc14f07e2ebc52b5f236ab4cdde7c77679b08cb2f94730043b\",\"license\":\"MIT\"},\"src/Delegator.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nimport \\\"./interfaces/IGovernanceToken.sol\\\";\\nimport \\\"../lib/openzeppelin-contracts/contracts/access/Ownable.sol\\\";\\n\\n/**\\n * @title Delegator Contract\\n * @author Cryptex.Finance\\n * @notice Contract in charge of handling delegations.\\n */\\n\\ncontract Delegator is Ownable {\\n   /* ========== STATE VARIABLES ========== */\\n\\n   /// @notice Address of the staking governance token\\n   address public immutable token;\\n\\n   /// @notice Tracks the amount of staked tokens per user\\n   mapping(address => uint256) public stakerBalance;\\n\\n   /* ========== CONSTRUCTOR ========== */\\n\\n   /**\\n    * @notice Constructor\\n    * @param delegatee_ address\\n    * @param token_ address\\n    * @dev when created delegates all it's power to delegatee_ and can't be changed later\\n    * @dev sets delegator factory as owner\\n    */\\n   constructor(address delegatee_, address token_) {\\n      token = token_;\\n      IGovernanceToken(token_).delegate(delegatee_);\\n   }\\n\\n   /* ========== MUTATIVE FUNCTIONS ========== */\\n\\n   /**\\n    * @notice Increases the balance of the staker\\n    * @param staker_ caller of the stake function\\n    * @param amount_ uint to be staked and delegated\\n    * @dev Only delegatorFactory can call it\\n    * @dev after the balance is updated the amount is transferred from the user to this contract\\n    */\\n   function stake(address staker_, uint256 amount_) external onlyOwner {\\n      stakerBalance[staker_] += amount_;\\n   }\\n\\n   /**\\n    * @notice Decreases the balance of the staker\\n    * @param staker_ caller of the stake function\\n    * @param amount_ uint to be withdrawn and undelegated\\n    * @dev Only delegatorFactory can call it\\n    * @dev after the balance is updated the amount is transferred back to the user from this contract\\n    */\\n   function removeStake(address staker_, uint256 amount_) external onlyOwner {\\n      stakerBalance[staker_] -= amount_;\\n      IGovernanceToken(token).transfer(staker_, amount_);\\n   }\\n\\n   /* ========== VIEWS ========== */\\n\\n   /// @notice returns the delegatee of this contract\\n   function delegatee() external returns (address) {\\n      return IGovernanceToken(token).delegates(address(this));\\n   }\\n}\\n\",\"keccak256\":\"0x27fa2190ebbbd40d31edc9a333019e310c04fc6e5379d2008af7061a34dd9e41\",\"license\":\"MIT\"},\"src/DelegatorFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nimport \\\"./interfaces/IGovernanceToken.sol\\\";\\nimport \\\"./Delegator.sol\\\";\\nimport \\\"../lib/openzeppelin-contracts/contracts/access/Ownable.sol\\\";\\nimport \\\"../lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"../lib/openzeppelin-contracts/contracts/utils/math/SafeMath.sol\\\";\\n\\n/**\\n * @title Delegator Contract Factory\\n * @author Cryptex.Finance\\n * @notice Contract in charge of generating Delegator contracts, handling delegations and CTX balance map, rewards.\\n */\\n\\ncontract DelegatorFactory is Ownable, ReentrancyGuard {\\n   /// @notice Using open zeppelin libraries\\n   using SafeMath for uint256;\\n\\n   /* ========== STATE VARIABLES ========== */\\n\\n   /// @notice Address of the staking governance token\\n   address public immutable stakingToken;\\n\\n   /// @notice Address of the reward token\\n   address public immutable rewardsToken;\\n\\n   /// @notice Minimum wait time before removing stake\\n   uint256 public waitTime;\\n\\n   /// @notice Tracks the period where users stop earning rewards\\n   uint256 public periodFinish = 0;\\n   uint256 public rewardRate = 0;\\n\\n   /// @notice How long the rewards lasts, it updates when more rewards are added\\n   uint256 public rewardsDuration = 186 days; //TODO: update to real value\\n\\n   /// @notice Last time rewards were updated\\n   uint256 public lastUpdateTime;\\n\\n   /// @notice Amount of reward calculated per token stored\\n   uint256 public rewardPerTokenStored;\\n\\n   /// @notice Track the rewards paid to users\\n   mapping(address => uint256) public userRewardPerTokenPaid;\\n\\n   /// @notice Tracks the user rewards\\n   mapping(address => uint256) public rewards;\\n\\n   /// @notice Tracks the address of a delegatee with a delegator contract address\\n   mapping(address => address) public delegatorToDelegatee;\\n\\n   /// @notice Tracks the delegator contract address from delegatee address\\n   mapping(address => address) public delegateeToDelegator;\\n\\n   /// @notice Tracks if address is an official delegator\\n   mapping(address => bool) public delegators;\\n\\n   /// @notice Tracks minimum wait time the account has to wait before removing stake\\n   mapping(address => mapping(address => uint256)) public stakerWaitTime;\\n\\n   /// @dev Tracks the total supply of staked tokens\\n   uint256 private _totalSupply;\\n\\n   /// @dev Tracks the amount of staked tokens per user\\n   mapping(address => uint256) private _balances;\\n\\n   /* ========== EVENTS ========== */\\n\\n   /// @notice An event emitted when a Delegator is created\\n   event DelegatorCreated(address indexed delegator, address indexed delegatee);\\n\\n   /// @notice An event emitted when an user has staked and delegated\\n   event Staked(\\n      address indexed delegator,\\n      address indexed delegatee,\\n      uint256 amount\\n   );\\n\\n   /// @notice An event emitted when an user removes stake and undelegated\\n   event Withdrawn(\\n      address indexed delegator,\\n      address indexed delegatee,\\n      uint256 amount\\n   );\\n\\n   /// @notice An event emitted when the minimum wait time is updated\\n   event WaitTimeUpdated(uint256 waitTime);\\n\\n   /// @notice An event emitted when a reward is added\\n   event RewardAdded(uint256 reward);\\n\\n   /// @notice An event emitted when reward is paid to a user\\n   event RewardPaid(address indexed user, uint256 reward);\\n\\n   /// @notice An event emitted when the rewards duration is updated\\n   event RewardsDurationUpdated(uint256 newDuration);\\n\\n   /* ========== CONSTRUCTOR ========== */\\n\\n   /**\\n    * @notice Constructor\\n    * @param stakingToken_ address\\n    * @param rewardsToken_ address\\n    * @param waitTime_ uint256\\n    * @param timelock_ address\\n    * @dev transfers ownership to timelock\\n    */\\n   constructor(\\n      address stakingToken_,\\n      address rewardsToken_,\\n      uint256 waitTime_,\\n      address timelock_\\n   ) {\\n      stakingToken = stakingToken_;\\n      rewardsToken = rewardsToken_;\\n      waitTime = waitTime_;\\n      transferOwnership(timelock_);\\n   }\\n\\n   /* ========== MODIFIERS ========== */\\n\\n   /**\\n    * @notice Updates the reward and time on call.\\n    * @param account_ address\\n    */\\n   modifier updateReward(address account_) {\\n      rewardPerTokenStored = rewardPerToken();\\n      lastUpdateTime = lastTimeRewardApplicable();\\n\\n      if (account_ != address(0)) {\\n         rewards[account_] = earned(account_);\\n         userRewardPerTokenPaid[account_] = rewardPerTokenStored;\\n      }\\n      _;\\n   }\\n\\n   /* ========== MUTATIVE FUNCTIONS ========== */\\n\\n   /**\\n    * @notice Notifies the contract that reward has been added to be given.\\n    * @param reward_ uint\\n    * @dev Only owner  can call it\\n    * @dev Increases duration of rewards\\n    */\\n   function notifyRewardAmount(uint256 reward_)\\n      external\\n      onlyOwner\\n      updateReward(address(0))\\n   {\\n      if (block.timestamp >= periodFinish) {\\n         rewardRate = reward_.div(rewardsDuration);\\n      } else {\\n         uint256 remaining = periodFinish.sub(block.timestamp);\\n         uint256 leftover = remaining.mul(rewardRate);\\n         rewardRate = reward_.add(leftover).div(rewardsDuration);\\n      }\\n\\n      // Ensure the provided reward amount is not more than the balance in the contract.\\n      // This keeps the reward rate in the right range, preventing overflows due to\\n      // very high values of rewardRate in the earned and rewardsPerToken functions;\\n      // Reward + leftover must be less than 2^256 / 10^18 to avoid overflow.\\n      uint256 balance = IGovernanceToken(rewardsToken).balanceOf(address(this));\\n      require(\\n         rewardRate <= balance.div(rewardsDuration),\\n         \\\"Provided reward too high\\\"\\n      );\\n\\n      lastUpdateTime = block.timestamp;\\n      periodFinish = block.timestamp.add(rewardsDuration);\\n      emit RewardAdded(reward_);\\n   }\\n\\n   /**\\n    * @notice  Updates the reward duration\\n    * @param rewardsDuration_ uint\\n    * @dev Only owner can call it\\n    * @dev Previous rewards must be complete\\n    */\\n   function setRewardsDuration(uint256 rewardsDuration_) external onlyOwner {\\n      require(\\n         block.timestamp > periodFinish,\\n         \\\"Previous rewards period must be complete before changing the duration for the new period\\\"\\n      );\\n      rewardsDuration = rewardsDuration_;\\n      emit RewardsDurationUpdated(rewardsDuration);\\n   }\\n\\n   /**\\n    * @notice Transfers to the caller the current amount of rewards tokens earned.\\n    * @dev updates rewards on call\\n    * @dev from the total reward a vestingRatio amount is locked into vesting and the rest is transferred\\n    * @dev if vesting period has passed transfer all rewards\\n    */\\n   function getReward() external nonReentrant updateReward(msg.sender) {\\n      uint256 reward = rewards[msg.sender];\\n      if (reward > 0) {\\n         rewards[msg.sender] = 0;\\n         IGovernanceToken(rewardsToken).transfer(msg.sender, reward);\\n         emit RewardPaid(msg.sender, reward);\\n      }\\n   }\\n\\n   /**\\n    * @notice Creates a new delegator contract that delegates all votes to delegatee_\\n    * @param delegatee_ address that will be receiving all votes\\n    * @dev only one delegator contract pointing to the same delegatee can exist\\n    */\\n   function createDelegator(address delegatee_) external {\\n      require(delegatee_ != address(0), \\\"Delegatee can't be 0\\\");\\n      require(\\n         delegateeToDelegator[delegatee_] == address(0),\\n         \\\"Delegator already created\\\"\\n      );\\n      Delegator delegator = new Delegator(delegatee_, stakingToken);\\n      delegateeToDelegator[delegatee_] = address(delegator);\\n      delegatorToDelegatee[address(delegator)] = delegatee_;\\n      delegators[address(delegator)] = true;\\n      emit DelegatorCreated(address(delegator), delegatee_);\\n   }\\n\\n   /**\\n    * @notice Stakes to delegator_ the amount_ specified\\n    * @param delegator_ contract address where to send the amount_\\n    * @param amount_ uint to be staked and delegated\\n    * @dev Delegator must be valid and amount has to be greater than 0\\n    * @dev amount_ is transferred to the delegator contract and staker starts earning rewards if active\\n    * @dev updates rewards on call\\n    */\\n   function stake(address delegator_, uint256 amount_)\\n      external\\n      nonReentrant\\n      updateReward(msg.sender)\\n   {\\n      require(delegators[delegator_], \\\"Not a valid delegator\\\");\\n      require(amount_ > 0, \\\"Amount must be greater than 0\\\");\\n      _totalSupply = _totalSupply.add(amount_);\\n      _balances[msg.sender] = _balances[msg.sender].add(amount_);\\n      Delegator d = Delegator(delegator_);\\n      d.stake(msg.sender, amount_);\\n      stakerWaitTime[msg.sender][delegator_] = block.timestamp + waitTime;\\n      IGovernanceToken(stakingToken).transferFrom(\\n         msg.sender,\\n         delegator_,\\n         amount_\\n      );\\n      emit Staked(delegator_, msg.sender, amount_);\\n   }\\n\\n   /**\\n    * @notice Removes amount_ from delegator_\\n    * @param delegator_ contract address where to remove the stake from\\n    * @param amount_ uint to be removed from stake and undelegated\\n    * @dev Delegator must be valid and amount has to be greater than 0\\n    * @dev amount_ must be <= that current user stake\\n    * @dev amount_ is transferred from the  delegator contract to the staker\\n    * @dev updates rewards on call\\n    * @dev requires that at least waitTime has passed since delegation to unDelegate\\n    */\\n   function withdraw(address delegator_, uint256 amount_)\\n      external\\n      nonReentrant\\n      updateReward(msg.sender)\\n   {\\n      require(delegators[delegator_], \\\"Not a valid delegator\\\");\\n      require(amount_ > 0, \\\"Amount must be greater than 0\\\");\\n      require(\\n         block.timestamp >= stakerWaitTime[msg.sender][delegator_],\\n         \\\"Need to wait the minimum staking period\\\"\\n      );\\n      _totalSupply = _totalSupply.sub(amount_);\\n      _balances[msg.sender] = _balances[msg.sender].sub(amount_);\\n      Delegator d = Delegator(delegator_);\\n      d.removeStake(msg.sender, amount_);\\n      emit Withdrawn(delegator_, msg.sender, amount_);\\n   }\\n\\n   /**\\n    * @notice updates the min wait time between delegation and unDelegation\\n    * @param waitTime_ uint new wait time\\n    * @dev only the owner can call it\\n    */\\n   function updateWaitTime(uint256 waitTime_) external onlyOwner {\\n      waitTime = waitTime_;\\n      emit WaitTimeUpdated(waitTime_);\\n   }\\n\\n   /* ========== VIEWS ========== */\\n\\n   /// @notice Returns the total amount of staked tokens.\\n   function totalSupply() external view returns (uint256) {\\n      return _totalSupply;\\n   }\\n\\n   /**\\n    * @notice Returns the amount of staked tokens from specific user\\n    * @param account_ address\\n    */\\n   function balanceOf(address account_) external view returns (uint256) {\\n      return _balances[account_];\\n   }\\n\\n   /// @notice Returns reward rate for a duration\\n   function getRewardForDuration() external view returns (uint256) {\\n      return rewardRate.mul(rewardsDuration);\\n   }\\n\\n   /// @notice Returns the minimum between current block timestamp or the finish period of rewards.\\n   function lastTimeRewardApplicable() public view returns (uint256) {\\n      return min(block.timestamp, periodFinish);\\n   }\\n\\n   /// @notice Returns the calculated reward per token deposited.\\n   function rewardPerToken() public view returns (uint256) {\\n      if (_totalSupply == 0) {\\n         return rewardPerTokenStored;\\n      }\\n\\n      return\\n         rewardPerTokenStored.add(\\n            lastTimeRewardApplicable()\\n               .sub(lastUpdateTime)\\n               .mul(rewardRate)\\n               .mul(1e18)\\n               .div(_totalSupply)\\n         );\\n   }\\n\\n   /**\\n    * @notice Returns the amount of reward tokens a user has earned.\\n    * @param account_ address\\n    */\\n   function earned(address account_) public view returns (uint256) {\\n      return\\n         _balances[account_]\\n            .mul(rewardPerToken().sub(userRewardPerTokenPaid[account_]))\\n            .div(1e18)\\n            .add(rewards[account_]);\\n   }\\n\\n   /**\\n    * @notice Returns the minimum between two variables\\n    * @param a_ uint\\n    * @param b_ uint\\n    */\\n   function min(uint256 a_, uint256 b_) public pure returns (uint256) {\\n      return a_ < b_ ? a_ : b_;\\n   }\\n}\\n\",\"keccak256\":\"0x91d42aac1b9ac3fb14b2216c3a4f750d92c34136f94e364e2abcb05a67cc5cf2\",\"license\":\"MIT\"},\"src/interfaces/IGovernanceToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\ninterface IGovernanceToken {\\n   function delegate(address delegatee) external;\\n\\n   function delegates(address delegator) external returns (address);\\n\\n   function transfer(address dst, uint256 rawAmount) external returns (bool);\\n\\n   function transferFrom(\\n      address src,\\n      address dst,\\n      uint256 rawAmount\\n   ) external returns (bool);\\n\\n   function balanceOf(address src) external returns (uint256);\\n}\\n\",\"keccak256\":\"0x2ad4f0843312165fa2a1b6f2a70b75ba8439b53812175dacef19be434ffaedfa\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60c06040526000600355600060045562f537006005553480156200002257600080fd5b50604051620028c7380380620028c78339810160408190526200004591620001ca565b620000503362000088565b600180556001600160601b0319606085811b821660805284901b1660a05260028290556200007e81620000d8565b505050506200021e565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6000546001600160a01b03163314620001385760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064015b60405180910390fd5b6001600160a01b0381166200019f5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016200012f565b620001aa8162000088565b50565b80516001600160a01b0381168114620001c557600080fd5b919050565b60008060008060808587031215620001e157600080fd5b620001ec85620001ad565b9350620001fc60208601620001ad565b9250604085015191506200021360608601620001ad565b905092959194509250565b60805160601c60a05160601c612661620002666000396000818161048c01528181610a090152610cd901526000818161037401528181610712015261125101526126616000f3fe60806040523480156200001157600080fd5b50600436106200020c5760003560e01c806380faa57d1162000125578063cd3daf9d11620000af578063df136d65116200007a578063df136d651462000515578063ebe2b12b146200051f578063f2fde38b1462000529578063f3fef3a3146200054057600080fd5b8063cd3daf9d146200047c578063d1af0c7d1462000486578063d4f8faa714620004ae578063d7f5c90014620004e757600080fd5b8063adc9772e11620000f0578063adc9772e146200043a578063c8f33c911462000451578063cc1a378f146200045b578063ccca123b146200047257600080fd5b806380faa57d14620003b75780638b87634714620003c15780638d23fc6114620003e45780638da5cb5b146200041b57600080fd5b80633c6b16ab11620001a7578063715018a61162000172578063715018a6146200036457806372f702f3146200036e5780637ae2b5c714620003965780637b0a47ee14620003ad57600080fd5b80633c6b16ab14620002f35780633d18b912146200030a5780636e372ef8146200031457806370a08231146200032b57600080fd5b806318160ddd11620001e857806318160ddd14620002775780631c1f78eb14620002805780632d8dea94146200028a578063386a952514620002e957600080fd5b80628cc26214620002115780630700037d146200023b57806307d97918146200025e575b600080fd5b620002286200022236600462001ad7565b62000557565b6040519081526020015b60405180910390f35b620002286200024c36600462001ad7565b60096020526000908152604090205481565b620002756200026f36600462001ad7565b620005f9565b005b600e5462000228565b620002286200084b565b620002c36200029b36600462001ad7565b600b6020526000908152604090205473ffffffffffffffffffffffffffffffffffffffff1681565b60405173ffffffffffffffffffffffffffffffffffffffff909116815260200162000232565b6200022860055481565b620002756200030436600462001b7e565b6200086b565b6200027562000b74565b620002756200032536600462001b7e565b62000d98565b620002286200033c36600462001ad7565b73ffffffffffffffffffffffffffffffffffffffff166000908152600f602052604090205490565b6200027562000e57565b620002c37f000000000000000000000000000000000000000000000000000000000000000081565b62000228620003a736600462001bb2565b62000ee8565b6200022860045481565b6200022862000f02565b62000228620003d236600462001ad7565b60086020526000908152604090205481565b6200040a620003f536600462001ad7565b600c6020526000908152604090205460ff1681565b604051901515815260200162000232565b60005473ffffffffffffffffffffffffffffffffffffffff16620002c3565b620002756200044b36600462001b2d565b62000f12565b6200022860065481565b620002756200046c36600462001b7e565b6200132c565b6200022860025481565b620002286200149e565b620002c37f000000000000000000000000000000000000000000000000000000000000000081565b620002c3620004bf36600462001ad7565b600a6020526000908152604090205473ffffffffffffffffffffffffffffffffffffffff1681565b62000228620004f836600462001af5565b600d60209081526000928352604080842090915290825290205481565b6200022860075481565b6200022860035481565b620002756200053a36600462001ad7565b620014f4565b620002756200055136600462001b2d565b6200162a565b73ffffffffffffffffffffffffffffffffffffffff81166000908152600960209081526040808320546008909252822054620005f39190620005ec90670de0b6b3a764000090620005e590620005b890620005b16200149e565b90620019f2565b73ffffffffffffffffffffffffffffffffffffffff88166000908152600f60205260409020549062001a00565b9062001a0e565b9062001a1c565b92915050565b73ffffffffffffffffffffffffffffffffffffffff81166200067c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f44656c6567617465652063616e2774206265203000000000000000000000000060448201526064015b60405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff8181166000908152600b602052604090205416156200070d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601960248201527f44656c656761746f7220616c7265616479206372656174656400000000000000604482015260640162000673565b6000817f00000000000000000000000000000000000000000000000000000000000000006040516200073f9062001a9f565b73ffffffffffffffffffffffffffffffffffffffff928316815291166020820152604001604051809103906000f08015801562000780573d6000803e3d6000fd5b5073ffffffffffffffffffffffffffffffffffffffff8084166000818152600b6020908152604080832080549587167fffffffffffffffffffffffff00000000000000000000000000000000000000009687168117909155808452600a835281842080549096168517909555600c90915280822080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660011790555193945090927f0976a62688d14faa8e35e63a7ada50f147ba1a0357f99182a596f9afea2502f49190a35050565b60006200086660055460045462001a0090919063ffffffff16565b905090565b60005473ffffffffffffffffffffffffffffffffffffffff163314620008ee576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640162000673565b6000620008fa6200149e565b6007556200090762000f02565b60065573ffffffffffffffffffffffffffffffffffffffff8116156200096b57620009328162000557565b73ffffffffffffffffffffffffffffffffffffffff82166000908152600960209081526040808320939093556007546008909152919020555b60035442106200098e576005546200098590839062001a0e565b600455620009d8565b600354600090620009a09042620019f2565b90506000620009bb6004548362001a0090919063ffffffff16565b600554909150620009d290620005e5868462001a1c565b60045550505b6040517f70a082310000000000000000000000000000000000000000000000000000000081523060048201526000907f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16906370a0823190602401602060405180830381600087803b15801562000a6357600080fd5b505af115801562000a78573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000a9e919062001b98565b905062000ab76005548262001a0e90919063ffffffff16565b600454111562000b24576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f50726f76696465642072657761726420746f6f20686967680000000000000000604482015260640162000673565b42600681905560055462000b39919062001a1c565b6003556040518381527fde88a922e0d3b88b24e9623efeb464919c6bf9f66857a65e2bfcf2ce87a9433d9060200160405180910390a1505050565b6002600154141562000be3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015260640162000673565b60026001553362000bf36200149e565b60075562000c0062000f02565b60065573ffffffffffffffffffffffffffffffffffffffff81161562000c645762000c2b8162000557565b73ffffffffffffffffffffffffffffffffffffffff82166000908152600960209081526040808320939093556007546008909152919020555b33600090815260096020526040902054801562000d90573360008181526009602052604080822091909155517fa9059cbb00000000000000000000000000000000000000000000000000000000815260048101919091526024810182905273ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000169063a9059cbb90604401602060405180830381600087803b15801562000d1e57600080fd5b505af115801562000d33573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000d59919062001b5a565b5060405181815233907fe2403640ba68fed3a2f88b7557551d1993f84b99bb10ff833f0cf8db0c5e04869060200160405180910390a25b505060018055565b60005473ffffffffffffffffffffffffffffffffffffffff16331462000e1b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640162000673565b60028190556040518181527fd7a3703f78487664fd138129246eed2d18e2fbbe550ea6839eb8717034543a52906020015b60405180910390a150565b60005473ffffffffffffffffffffffffffffffffffffffff16331462000eda576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640162000673565b62000ee6600062001a2a565b565b600081831062000ef9578162000efb565b825b9392505050565b6000620008664260035462000ee8565b6002600154141562000f81576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015260640162000673565b60026001553362000f916200149e565b60075562000f9e62000f02565b60065573ffffffffffffffffffffffffffffffffffffffff811615620010025762000fc98162000557565b73ffffffffffffffffffffffffffffffffffffffff82166000908152600960209081526040808320939093556007546008909152919020555b73ffffffffffffffffffffffffffffffffffffffff83166000908152600c602052604090205460ff1662001093576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601560248201527f4e6f7420612076616c69642064656c656761746f720000000000000000000000604482015260640162000673565b60008211620010ff576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416d6f756e74206d7573742062652067726561746572207468616e2030000000604482015260640162000673565b600e546200110e908362001a1c565b600e55336000908152600f60205260409020546200112d908362001a1c565b336000818152600f6020526040908190209290925590517fadc9772e000000000000000000000000000000000000000000000000000000008152600481019190915260248101839052839073ffffffffffffffffffffffffffffffffffffffff82169063adc9772e90604401600060405180830381600087803b158015620011b457600080fd5b505af1158015620011c9573d6000803e3d6000fd5b5050505060025442620011dd919062001bd5565b336000818152600d6020908152604080832073ffffffffffffffffffffffffffffffffffffffff8a811680865291909352928190209490945592517f23b872dd00000000000000000000000000000000000000000000000000000000815260048101929092526024820152604481018590527f0000000000000000000000000000000000000000000000000000000000000000909116906323b872dd90606401602060405180830381600087803b1580156200129857600080fd5b505af1158015620012ad573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620012d3919062001b5a565b50604051838152339073ffffffffffffffffffffffffffffffffffffffff8616907f5dac0c1b1112564a045ba943c9d50270893e8e826c49be8e7073adc713ab7bd7906020015b60405180910390a35050600180555050565b60005473ffffffffffffffffffffffffffffffffffffffff163314620013af576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640162000673565b600354421162001468576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152605860248201527f50726576696f7573207265776172647320706572696f64206d7573742062652060448201527f636f6d706c657465206265666f7265206368616e67696e67207468652064757260648201527f6174696f6e20666f7220746865206e657720706572696f640000000000000000608482015260a40162000673565b60058190556040518181527ffb46ca5a5e06d4540d6387b930a7c978bce0db5f449ec6b3f5d07c6e1d44f2d39060200162000e4c565b6000600e5460001415620014b3575060075490565b62000866620014ea600e54620005e5670de0b6b3a7640000620014e3600454620014e3600654620005b162000f02565b9062001a00565b6007549062001a1c565b60005473ffffffffffffffffffffffffffffffffffffffff16331462001577576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640162000673565b73ffffffffffffffffffffffffffffffffffffffff81166200161c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f6464726573730000000000000000000000000000000000000000000000000000606482015260840162000673565b620016278162001a2a565b50565b6002600154141562001699576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015260640162000673565b600260015533620016a96200149e565b600755620016b662000f02565b60065573ffffffffffffffffffffffffffffffffffffffff8116156200171a57620016e18162000557565b73ffffffffffffffffffffffffffffffffffffffff82166000908152600960209081526040808320939093556007546008909152919020555b73ffffffffffffffffffffffffffffffffffffffff83166000908152600c602052604090205460ff16620017ab576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601560248201527f4e6f7420612076616c69642064656c656761746f720000000000000000000000604482015260640162000673565b6000821162001817576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416d6f756e74206d7573742062652067726561746572207468616e2030000000604482015260640162000673565b336000908152600d6020908152604080832073ffffffffffffffffffffffffffffffffffffffff87168452909152902054421015620018d9576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602760248201527f4e65656420746f207761697420746865206d696e696d756d207374616b696e6760448201527f20706572696f6400000000000000000000000000000000000000000000000000606482015260840162000673565b600e54620018e89083620019f2565b600e55336000908152600f6020526040902054620019079083620019f2565b336000818152600f6020526040908190209290925590517f68ce7d8a000000000000000000000000000000000000000000000000000000008152600481019190915260248101839052839073ffffffffffffffffffffffffffffffffffffffff8216906368ce7d8a90604401600060405180830381600087803b1580156200198e57600080fd5b505af1158015620019a3573d6000803e3d6000fd5b505060405185815233925073ffffffffffffffffffffffffffffffffffffffff871691507fd1c19fbcd4551a5edfb66d43d2e337c04837afda3482b42bdf569a8fccdae5fb906020016200131a565b600062000efb828462001c6c565b600062000efb828462001c2c565b600062000efb828462001bf0565b600062000efb828462001bd5565b6000805473ffffffffffffffffffffffffffffffffffffffff8381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6109768062001cb683390190565b803573ffffffffffffffffffffffffffffffffffffffff8116811462001ad257600080fd5b919050565b60006020828403121562001aea57600080fd5b62000efb8262001aad565b6000806040838503121562001b0957600080fd5b62001b148362001aad565b915062001b246020840162001aad565b90509250929050565b6000806040838503121562001b4157600080fd5b62001b4c8362001aad565b946020939093013593505050565b60006020828403121562001b6d57600080fd5b8151801515811462000efb57600080fd5b60006020828403121562001b9157600080fd5b5035919050565b60006020828403121562001bab57600080fd5b5051919050565b6000806040838503121562001bc657600080fd5b50508035926020909101359150565b6000821982111562001beb5762001beb62001c86565b500190565b60008262001c27577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b500490565b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048311821515161562001c675762001c6762001c86565b500290565b60008282101562001c815762001c8162001c86565b500390565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fdfe60a060405234801561001057600080fd5b5060405161097638038061097683398101604081905261002f91610118565b610038336100ac565b606081901b6001600160601b0319166080526040516317066a5760e21b81526001600160a01b038381166004830152821690635c19a95c90602401600060405180830381600087803b15801561008d57600080fd5b505af11580156100a1573d6000803e3d6000fd5b50505050505061014b565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b80516001600160a01b038116811461011357600080fd5b919050565b6000806040838503121561012b57600080fd5b610134836100fc565b9150610142602084016100fc565b90509250929050565b60805160601c6107ff61017760003960008181610153015281816101a6015261034801526107ff6000f3fe608060405234801561001057600080fd5b50600436106100885760003560e01c8063adc9772e1161005b578063adc9772e146100fa578063eca5b8d31461010d578063f2fde38b1461013b578063fc0c546a1461014e57600080fd5b80631e31d0531461008d57806368ce7d8a146100bf578063715018a6146100d45780638da5cb5b146100dc575b600080fd5b610095610175565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020015b60405180910390f35b6100d26100cd3660046106fb565b61023c565b005b6100d26103c9565b60005473ffffffffffffffffffffffffffffffffffffffff16610095565b6100d26101083660046106fb565b610456565b61012d61011b3660046106ba565b60016020526000908152604090205481565b6040519081526020016100b6565b6100d26101493660046106ba565b610515565b6100957f000000000000000000000000000000000000000000000000000000000000000081565b6040517f587cde1e0000000000000000000000000000000000000000000000000000000081523060048201526000907f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff169063587cde1e90602401602060405180830381600087803b1580156101ff57600080fd5b505af1158015610213573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061023791906106de565b905090565b60005473ffffffffffffffffffffffffffffffffffffffff1633146102c2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064015b60405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff8216600090815260016020526040812080548392906102f7908490610761565b90915550506040517fa9059cbb00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8381166004830152602482018390527f0000000000000000000000000000000000000000000000000000000000000000169063a9059cbb90604401602060405180830381600087803b15801561038c57600080fd5b505af11580156103a0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103c49190610727565b505050565b60005473ffffffffffffffffffffffffffffffffffffffff16331461044a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016102b9565b6104546000610645565b565b60005473ffffffffffffffffffffffffffffffffffffffff1633146104d7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016102b9565b73ffffffffffffffffffffffffffffffffffffffff82166000908152600160205260408120805483929061050c908490610749565b90915550505050565b60005473ffffffffffffffffffffffffffffffffffffffff163314610596576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016102b9565b73ffffffffffffffffffffffffffffffffffffffff8116610639576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f646472657373000000000000000000000000000000000000000000000000000060648201526084016102b9565b61064281610645565b50565b6000805473ffffffffffffffffffffffffffffffffffffffff8381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6000602082840312156106cc57600080fd5b81356106d7816107a7565b9392505050565b6000602082840312156106f057600080fd5b81516106d7816107a7565b6000806040838503121561070e57600080fd5b8235610719816107a7565b946020939093013593505050565b60006020828403121561073957600080fd5b815180151581146106d757600080fd5b6000821982111561075c5761075c610778565b500190565b60008282101561077357610773610778565b500390565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b73ffffffffffffffffffffffffffffffffffffffff8116811461064257600080fdfea26469706673582212203d6f9193b1a6aad45f2464922ab48377293df2d7f740f69e3e26bdd453cc84ef64736f6c63430008060033a264697066735822122071b47bc39e07f3902cd17d0013636698caac50e76d33be19e154505cf5bbf19764736f6c63430008060033",
  "deployedBytecode": "0x60806040523480156200001157600080fd5b50600436106200020c5760003560e01c806380faa57d1162000125578063cd3daf9d11620000af578063df136d65116200007a578063df136d651462000515578063ebe2b12b146200051f578063f2fde38b1462000529578063f3fef3a3146200054057600080fd5b8063cd3daf9d146200047c578063d1af0c7d1462000486578063d4f8faa714620004ae578063d7f5c90014620004e757600080fd5b8063adc9772e11620000f0578063adc9772e146200043a578063c8f33c911462000451578063cc1a378f146200045b578063ccca123b146200047257600080fd5b806380faa57d14620003b75780638b87634714620003c15780638d23fc6114620003e45780638da5cb5b146200041b57600080fd5b80633c6b16ab11620001a7578063715018a61162000172578063715018a6146200036457806372f702f3146200036e5780637ae2b5c714620003965780637b0a47ee14620003ad57600080fd5b80633c6b16ab14620002f35780633d18b912146200030a5780636e372ef8146200031457806370a08231146200032b57600080fd5b806318160ddd11620001e857806318160ddd14620002775780631c1f78eb14620002805780632d8dea94146200028a578063386a952514620002e957600080fd5b80628cc26214620002115780630700037d146200023b57806307d97918146200025e575b600080fd5b620002286200022236600462001ad7565b62000557565b6040519081526020015b60405180910390f35b620002286200024c36600462001ad7565b60096020526000908152604090205481565b620002756200026f36600462001ad7565b620005f9565b005b600e5462000228565b620002286200084b565b620002c36200029b36600462001ad7565b600b6020526000908152604090205473ffffffffffffffffffffffffffffffffffffffff1681565b60405173ffffffffffffffffffffffffffffffffffffffff909116815260200162000232565b6200022860055481565b620002756200030436600462001b7e565b6200086b565b6200027562000b74565b620002756200032536600462001b7e565b62000d98565b620002286200033c36600462001ad7565b73ffffffffffffffffffffffffffffffffffffffff166000908152600f602052604090205490565b6200027562000e57565b620002c37f000000000000000000000000000000000000000000000000000000000000000081565b62000228620003a736600462001bb2565b62000ee8565b6200022860045481565b6200022862000f02565b62000228620003d236600462001ad7565b60086020526000908152604090205481565b6200040a620003f536600462001ad7565b600c6020526000908152604090205460ff1681565b604051901515815260200162000232565b60005473ffffffffffffffffffffffffffffffffffffffff16620002c3565b620002756200044b36600462001b2d565b62000f12565b6200022860065481565b620002756200046c36600462001b7e565b6200132c565b6200022860025481565b620002286200149e565b620002c37f000000000000000000000000000000000000000000000000000000000000000081565b620002c3620004bf36600462001ad7565b600a6020526000908152604090205473ffffffffffffffffffffffffffffffffffffffff1681565b62000228620004f836600462001af5565b600d60209081526000928352604080842090915290825290205481565b6200022860075481565b6200022860035481565b620002756200053a36600462001ad7565b620014f4565b620002756200055136600462001b2d565b6200162a565b73ffffffffffffffffffffffffffffffffffffffff81166000908152600960209081526040808320546008909252822054620005f39190620005ec90670de0b6b3a764000090620005e590620005b890620005b16200149e565b90620019f2565b73ffffffffffffffffffffffffffffffffffffffff88166000908152600f60205260409020549062001a00565b9062001a0e565b9062001a1c565b92915050565b73ffffffffffffffffffffffffffffffffffffffff81166200067c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f44656c6567617465652063616e2774206265203000000000000000000000000060448201526064015b60405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff8181166000908152600b602052604090205416156200070d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601960248201527f44656c656761746f7220616c7265616479206372656174656400000000000000604482015260640162000673565b6000817f00000000000000000000000000000000000000000000000000000000000000006040516200073f9062001a9f565b73ffffffffffffffffffffffffffffffffffffffff928316815291166020820152604001604051809103906000f08015801562000780573d6000803e3d6000fd5b5073ffffffffffffffffffffffffffffffffffffffff8084166000818152600b6020908152604080832080549587167fffffffffffffffffffffffff00000000000000000000000000000000000000009687168117909155808452600a835281842080549096168517909555600c90915280822080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660011790555193945090927f0976a62688d14faa8e35e63a7ada50f147ba1a0357f99182a596f9afea2502f49190a35050565b60006200086660055460045462001a0090919063ffffffff16565b905090565b60005473ffffffffffffffffffffffffffffffffffffffff163314620008ee576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640162000673565b6000620008fa6200149e565b6007556200090762000f02565b60065573ffffffffffffffffffffffffffffffffffffffff8116156200096b57620009328162000557565b73ffffffffffffffffffffffffffffffffffffffff82166000908152600960209081526040808320939093556007546008909152919020555b60035442106200098e576005546200098590839062001a0e565b600455620009d8565b600354600090620009a09042620019f2565b90506000620009bb6004548362001a0090919063ffffffff16565b600554909150620009d290620005e5868462001a1c565b60045550505b6040517f70a082310000000000000000000000000000000000000000000000000000000081523060048201526000907f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16906370a0823190602401602060405180830381600087803b15801562000a6357600080fd5b505af115801562000a78573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000a9e919062001b98565b905062000ab76005548262001a0e90919063ffffffff16565b600454111562000b24576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f50726f76696465642072657761726420746f6f20686967680000000000000000604482015260640162000673565b42600681905560055462000b39919062001a1c565b6003556040518381527fde88a922e0d3b88b24e9623efeb464919c6bf9f66857a65e2bfcf2ce87a9433d9060200160405180910390a1505050565b6002600154141562000be3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015260640162000673565b60026001553362000bf36200149e565b60075562000c0062000f02565b60065573ffffffffffffffffffffffffffffffffffffffff81161562000c645762000c2b8162000557565b73ffffffffffffffffffffffffffffffffffffffff82166000908152600960209081526040808320939093556007546008909152919020555b33600090815260096020526040902054801562000d90573360008181526009602052604080822091909155517fa9059cbb00000000000000000000000000000000000000000000000000000000815260048101919091526024810182905273ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000169063a9059cbb90604401602060405180830381600087803b15801562000d1e57600080fd5b505af115801562000d33573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000d59919062001b5a565b5060405181815233907fe2403640ba68fed3a2f88b7557551d1993f84b99bb10ff833f0cf8db0c5e04869060200160405180910390a25b505060018055565b60005473ffffffffffffffffffffffffffffffffffffffff16331462000e1b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640162000673565b60028190556040518181527fd7a3703f78487664fd138129246eed2d18e2fbbe550ea6839eb8717034543a52906020015b60405180910390a150565b60005473ffffffffffffffffffffffffffffffffffffffff16331462000eda576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640162000673565b62000ee6600062001a2a565b565b600081831062000ef9578162000efb565b825b9392505050565b6000620008664260035462000ee8565b6002600154141562000f81576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015260640162000673565b60026001553362000f916200149e565b60075562000f9e62000f02565b60065573ffffffffffffffffffffffffffffffffffffffff811615620010025762000fc98162000557565b73ffffffffffffffffffffffffffffffffffffffff82166000908152600960209081526040808320939093556007546008909152919020555b73ffffffffffffffffffffffffffffffffffffffff83166000908152600c602052604090205460ff1662001093576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601560248201527f4e6f7420612076616c69642064656c656761746f720000000000000000000000604482015260640162000673565b60008211620010ff576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416d6f756e74206d7573742062652067726561746572207468616e2030000000604482015260640162000673565b600e546200110e908362001a1c565b600e55336000908152600f60205260409020546200112d908362001a1c565b336000818152600f6020526040908190209290925590517fadc9772e000000000000000000000000000000000000000000000000000000008152600481019190915260248101839052839073ffffffffffffffffffffffffffffffffffffffff82169063adc9772e90604401600060405180830381600087803b158015620011b457600080fd5b505af1158015620011c9573d6000803e3d6000fd5b5050505060025442620011dd919062001bd5565b336000818152600d6020908152604080832073ffffffffffffffffffffffffffffffffffffffff8a811680865291909352928190209490945592517f23b872dd00000000000000000000000000000000000000000000000000000000815260048101929092526024820152604481018590527f0000000000000000000000000000000000000000000000000000000000000000909116906323b872dd90606401602060405180830381600087803b1580156200129857600080fd5b505af1158015620012ad573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620012d3919062001b5a565b50604051838152339073ffffffffffffffffffffffffffffffffffffffff8616907f5dac0c1b1112564a045ba943c9d50270893e8e826c49be8e7073adc713ab7bd7906020015b60405180910390a35050600180555050565b60005473ffffffffffffffffffffffffffffffffffffffff163314620013af576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640162000673565b600354421162001468576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152605860248201527f50726576696f7573207265776172647320706572696f64206d7573742062652060448201527f636f6d706c657465206265666f7265206368616e67696e67207468652064757260648201527f6174696f6e20666f7220746865206e657720706572696f640000000000000000608482015260a40162000673565b60058190556040518181527ffb46ca5a5e06d4540d6387b930a7c978bce0db5f449ec6b3f5d07c6e1d44f2d39060200162000e4c565b6000600e5460001415620014b3575060075490565b62000866620014ea600e54620005e5670de0b6b3a7640000620014e3600454620014e3600654620005b162000f02565b9062001a00565b6007549062001a1c565b60005473ffffffffffffffffffffffffffffffffffffffff16331462001577576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640162000673565b73ffffffffffffffffffffffffffffffffffffffff81166200161c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f6464726573730000000000000000000000000000000000000000000000000000606482015260840162000673565b620016278162001a2a565b50565b6002600154141562001699576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015260640162000673565b600260015533620016a96200149e565b600755620016b662000f02565b60065573ffffffffffffffffffffffffffffffffffffffff8116156200171a57620016e18162000557565b73ffffffffffffffffffffffffffffffffffffffff82166000908152600960209081526040808320939093556007546008909152919020555b73ffffffffffffffffffffffffffffffffffffffff83166000908152600c602052604090205460ff16620017ab576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601560248201527f4e6f7420612076616c69642064656c656761746f720000000000000000000000604482015260640162000673565b6000821162001817576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416d6f756e74206d7573742062652067726561746572207468616e2030000000604482015260640162000673565b336000908152600d6020908152604080832073ffffffffffffffffffffffffffffffffffffffff87168452909152902054421015620018d9576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602760248201527f4e65656420746f207761697420746865206d696e696d756d207374616b696e6760448201527f20706572696f6400000000000000000000000000000000000000000000000000606482015260840162000673565b600e54620018e89083620019f2565b600e55336000908152600f6020526040902054620019079083620019f2565b336000818152600f6020526040908190209290925590517f68ce7d8a000000000000000000000000000000000000000000000000000000008152600481019190915260248101839052839073ffffffffffffffffffffffffffffffffffffffff8216906368ce7d8a90604401600060405180830381600087803b1580156200198e57600080fd5b505af1158015620019a3573d6000803e3d6000fd5b505060405185815233925073ffffffffffffffffffffffffffffffffffffffff871691507fd1c19fbcd4551a5edfb66d43d2e337c04837afda3482b42bdf569a8fccdae5fb906020016200131a565b600062000efb828462001c6c565b600062000efb828462001c2c565b600062000efb828462001bf0565b600062000efb828462001bd5565b6000805473ffffffffffffffffffffffffffffffffffffffff8381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6109768062001cb683390190565b803573ffffffffffffffffffffffffffffffffffffffff8116811462001ad257600080fd5b919050565b60006020828403121562001aea57600080fd5b62000efb8262001aad565b6000806040838503121562001b0957600080fd5b62001b148362001aad565b915062001b246020840162001aad565b90509250929050565b6000806040838503121562001b4157600080fd5b62001b4c8362001aad565b946020939093013593505050565b60006020828403121562001b6d57600080fd5b8151801515811462000efb57600080fd5b60006020828403121562001b9157600080fd5b5035919050565b60006020828403121562001bab57600080fd5b5051919050565b6000806040838503121562001bc657600080fd5b50508035926020909101359150565b6000821982111562001beb5762001beb62001c86565b500190565b60008262001c27577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b500490565b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048311821515161562001c675762001c6762001c86565b500290565b60008282101562001c815762001c8162001c86565b500390565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fdfe60a060405234801561001057600080fd5b5060405161097638038061097683398101604081905261002f91610118565b610038336100ac565b606081901b6001600160601b0319166080526040516317066a5760e21b81526001600160a01b038381166004830152821690635c19a95c90602401600060405180830381600087803b15801561008d57600080fd5b505af11580156100a1573d6000803e3d6000fd5b50505050505061014b565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b80516001600160a01b038116811461011357600080fd5b919050565b6000806040838503121561012b57600080fd5b610134836100fc565b9150610142602084016100fc565b90509250929050565b60805160601c6107ff61017760003960008181610153015281816101a6015261034801526107ff6000f3fe608060405234801561001057600080fd5b50600436106100885760003560e01c8063adc9772e1161005b578063adc9772e146100fa578063eca5b8d31461010d578063f2fde38b1461013b578063fc0c546a1461014e57600080fd5b80631e31d0531461008d57806368ce7d8a146100bf578063715018a6146100d45780638da5cb5b146100dc575b600080fd5b610095610175565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020015b60405180910390f35b6100d26100cd3660046106fb565b61023c565b005b6100d26103c9565b60005473ffffffffffffffffffffffffffffffffffffffff16610095565b6100d26101083660046106fb565b610456565b61012d61011b3660046106ba565b60016020526000908152604090205481565b6040519081526020016100b6565b6100d26101493660046106ba565b610515565b6100957f000000000000000000000000000000000000000000000000000000000000000081565b6040517f587cde1e0000000000000000000000000000000000000000000000000000000081523060048201526000907f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff169063587cde1e90602401602060405180830381600087803b1580156101ff57600080fd5b505af1158015610213573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061023791906106de565b905090565b60005473ffffffffffffffffffffffffffffffffffffffff1633146102c2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064015b60405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff8216600090815260016020526040812080548392906102f7908490610761565b90915550506040517fa9059cbb00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8381166004830152602482018390527f0000000000000000000000000000000000000000000000000000000000000000169063a9059cbb90604401602060405180830381600087803b15801561038c57600080fd5b505af11580156103a0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103c49190610727565b505050565b60005473ffffffffffffffffffffffffffffffffffffffff16331461044a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016102b9565b6104546000610645565b565b60005473ffffffffffffffffffffffffffffffffffffffff1633146104d7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016102b9565b73ffffffffffffffffffffffffffffffffffffffff82166000908152600160205260408120805483929061050c908490610749565b90915550505050565b60005473ffffffffffffffffffffffffffffffffffffffff163314610596576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016102b9565b73ffffffffffffffffffffffffffffffffffffffff8116610639576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f646472657373000000000000000000000000000000000000000000000000000060648201526084016102b9565b61064281610645565b50565b6000805473ffffffffffffffffffffffffffffffffffffffff8381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6000602082840312156106cc57600080fd5b81356106d7816107a7565b9392505050565b6000602082840312156106f057600080fd5b81516106d7816107a7565b6000806040838503121561070e57600080fd5b8235610719816107a7565b946020939093013593505050565b60006020828403121561073957600080fd5b815180151581146106d757600080fd5b6000821982111561075c5761075c610778565b500190565b60008282101561077357610773610778565b500390565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b73ffffffffffffffffffffffffffffffffffffffff8116811461064257600080fdfea26469706673582212203d6f9193b1a6aad45f2464922ab48377293df2d7f740f69e3e26bdd453cc84ef64736f6c63430008060033a264697066735822122071b47bc39e07f3902cd17d0013636698caac50e76d33be19e154505cf5bbf19764736f6c63430008060033",
  "devdoc": {
    "author": "Cryptex.Finance",
    "kind": "dev",
    "methods": {
      "balanceOf(address)": {
        "params": {
          "account_": "address"
        }
      },
      "constructor": {
        "details": "transfers ownership to timelock",
        "params": {
          "rewardsToken_": "address",
          "stakingToken_": "address",
          "timelock_": "address",
          "waitTime_": "uint256"
        }
      },
      "createDelegator(address)": {
        "details": "only one delegator contract pointing to the same delegatee can exist",
        "params": {
          "delegatee_": "address that will be receiving all votes"
        }
      },
      "earned(address)": {
        "params": {
          "account_": "address"
        }
      },
      "getReward()": {
        "details": "updates rewards on callfrom the total reward a vestingRatio amount is locked into vesting and the rest is transferredif vesting period has passed transfer all rewards"
      },
      "min(uint256,uint256)": {
        "params": {
          "a_": "uint",
          "b_": "uint"
        }
      },
      "notifyRewardAmount(uint256)": {
        "details": "Only owner  can call itIncreases duration of rewards",
        "params": {
          "reward_": "uint"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "setRewardsDuration(uint256)": {
        "details": "Only owner can call itPrevious rewards must be complete",
        "params": {
          "rewardsDuration_": "uint"
        }
      },
      "stake(address,uint256)": {
        "details": "Delegator must be valid and amount has to be greater than 0amount_ is transferred to the delegator contract and staker starts earning rewards if activeupdates rewards on call",
        "params": {
          "amount_": "uint to be staked and delegated",
          "delegator_": "contract address where to send the amount_"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "updateWaitTime(uint256)": {
        "details": "only the owner can call it",
        "params": {
          "waitTime_": "uint new wait time"
        }
      },
      "withdraw(address,uint256)": {
        "details": "Delegator must be valid and amount has to be greater than 0amount_ must be <= that current user stakeamount_ is transferred from the  delegator contract to the stakerupdates rewards on callrequires that at least waitTime has passed since delegation to unDelegate",
        "params": {
          "amount_": "uint to be removed from stake and undelegated",
          "delegator_": "contract address where to remove the stake from"
        }
      }
    },
    "stateVariables": {
      "_balances": {
        "details": "Tracks the amount of staked tokens per user"
      },
      "_totalSupply": {
        "details": "Tracks the total supply of staked tokens"
      }
    },
    "title": "Delegator Contract Factory",
    "version": 1
  },
  "userdoc": {
    "events": {
      "DelegatorCreated(address,address)": {
        "notice": "An event emitted when a Delegator is created"
      },
      "RewardAdded(uint256)": {
        "notice": "An event emitted when a reward is added"
      },
      "RewardPaid(address,uint256)": {
        "notice": "An event emitted when reward is paid to a user"
      },
      "RewardsDurationUpdated(uint256)": {
        "notice": "An event emitted when the rewards duration is updated"
      },
      "Staked(address,address,uint256)": {
        "notice": "An event emitted when an user has staked and delegated"
      },
      "WaitTimeUpdated(uint256)": {
        "notice": "An event emitted when the minimum wait time is updated"
      },
      "Withdrawn(address,address,uint256)": {
        "notice": "An event emitted when an user removes stake and undelegated"
      }
    },
    "kind": "user",
    "methods": {
      "balanceOf(address)": {
        "notice": "Returns the amount of staked tokens from specific user"
      },
      "constructor": {
        "notice": "Constructor"
      },
      "createDelegator(address)": {
        "notice": "Creates a new delegator contract that delegates all votes to delegatee_"
      },
      "delegateeToDelegator(address)": {
        "notice": "Tracks the delegator contract address from delegatee address"
      },
      "delegatorToDelegatee(address)": {
        "notice": "Tracks the address of a delegatee with a delegator contract address"
      },
      "delegators(address)": {
        "notice": "Tracks if address is an official delegator"
      },
      "earned(address)": {
        "notice": "Returns the amount of reward tokens a user has earned."
      },
      "getReward()": {
        "notice": "Transfers to the caller the current amount of rewards tokens earned."
      },
      "getRewardForDuration()": {
        "notice": "Returns reward rate for a duration"
      },
      "lastTimeRewardApplicable()": {
        "notice": "Returns the minimum between current block timestamp or the finish period of rewards."
      },
      "lastUpdateTime()": {
        "notice": "Last time rewards were updated"
      },
      "min(uint256,uint256)": {
        "notice": "Returns the minimum between two variables"
      },
      "notifyRewardAmount(uint256)": {
        "notice": "Notifies the contract that reward has been added to be given."
      },
      "periodFinish()": {
        "notice": "Tracks the period where users stop earning rewards"
      },
      "rewardPerToken()": {
        "notice": "Returns the calculated reward per token deposited."
      },
      "rewardPerTokenStored()": {
        "notice": "Amount of reward calculated per token stored"
      },
      "rewards(address)": {
        "notice": "Tracks the user rewards"
      },
      "rewardsDuration()": {
        "notice": "How long the rewards lasts, it updates when more rewards are added"
      },
      "rewardsToken()": {
        "notice": "Address of the reward token"
      },
      "setRewardsDuration(uint256)": {
        "notice": "Updates the reward duration"
      },
      "stake(address,uint256)": {
        "notice": "Stakes to delegator_ the amount_ specified"
      },
      "stakerWaitTime(address,address)": {
        "notice": "Tracks minimum wait time the account has to wait before removing stake"
      },
      "stakingToken()": {
        "notice": "Address of the staking governance token"
      },
      "totalSupply()": {
        "notice": "Returns the total amount of staked tokens."
      },
      "updateWaitTime(uint256)": {
        "notice": "updates the min wait time between delegation and unDelegation"
      },
      "userRewardPerTokenPaid(address)": {
        "notice": "Track the rewards paid to users"
      },
      "waitTime()": {
        "notice": "Minimum wait time before removing stake"
      },
      "withdraw(address,uint256)": {
        "notice": "Removes amount_ from delegator_"
      }
    },
    "notice": "Contract in charge of generating Delegator contracts, handling delegations and CTX balance map, rewards.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1754,
        "contract": "src/DelegatorFactory.sol:DelegatorFactory",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 1861,
        "contract": "src/DelegatorFactory.sol:DelegatorFactory",
        "label": "_status",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 2343,
        "contract": "src/DelegatorFactory.sol:DelegatorFactory",
        "label": "waitTime",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 2347,
        "contract": "src/DelegatorFactory.sol:DelegatorFactory",
        "label": "periodFinish",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 2350,
        "contract": "src/DelegatorFactory.sol:DelegatorFactory",
        "label": "rewardRate",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 2354,
        "contract": "src/DelegatorFactory.sol:DelegatorFactory",
        "label": "rewardsDuration",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 2357,
        "contract": "src/DelegatorFactory.sol:DelegatorFactory",
        "label": "lastUpdateTime",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 2360,
        "contract": "src/DelegatorFactory.sol:DelegatorFactory",
        "label": "rewardPerTokenStored",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 2365,
        "contract": "src/DelegatorFactory.sol:DelegatorFactory",
        "label": "userRewardPerTokenPaid",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 2370,
        "contract": "src/DelegatorFactory.sol:DelegatorFactory",
        "label": "rewards",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 2375,
        "contract": "src/DelegatorFactory.sol:DelegatorFactory",
        "label": "delegatorToDelegatee",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_address,t_address)"
      },
      {
        "astId": 2380,
        "contract": "src/DelegatorFactory.sol:DelegatorFactory",
        "label": "delegateeToDelegator",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_address,t_address)"
      },
      {
        "astId": 2385,
        "contract": "src/DelegatorFactory.sol:DelegatorFactory",
        "label": "delegators",
        "offset": 0,
        "slot": "12",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 2392,
        "contract": "src/DelegatorFactory.sol:DelegatorFactory",
        "label": "stakerWaitTime",
        "offset": 0,
        "slot": "13",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 2395,
        "contract": "src/DelegatorFactory.sol:DelegatorFactory",
        "label": "_totalSupply",
        "offset": 0,
        "slot": "14",
        "type": "t_uint256"
      },
      {
        "astId": 2400,
        "contract": "src/DelegatorFactory.sol:DelegatorFactory",
        "label": "_balances",
        "offset": 0,
        "slot": "15",
        "type": "t_mapping(t_address,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}